require('dotenv').config();

const SheetsService = require('./sheetsService');
const { createFacebookClient } = require('./facebookClient');

const config = {
  pageA_ID: process.env.PAGE_A_ID,
  pageB_ID: process.env.PAGE_B_ID,
  pageA_TOKEN: process.env.PAGE_A_TOKEN,
  pageB_TOKEN: process.env.PAGE_B_TOKEN,
  spreadsheetId: process.env.SPREADSHEET_ID,
  sheetTabName: process.env.SHEET_TAB_NAME,
  backgroundId: process.env.BACKGROUND_ID,
  usedRowColor: process.env.USED_ROW_COLOR
};

const sheetsService = new SheetsService();

function ensureConfig(keys) {
  const missing = keys.filter((key) => {
    const value = config[key];
    return typeof value === 'undefined' || value === null || value === '';
  });

  if (missing.length > 0) {
    throw new Error(`Missing required environment variables: ${missing.join(', ')}`);
  }
}

async function findUnusedRow() {
  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ)...');

  const columnData = await sheetsService.getColumnValuesWithBackground(
    config.spreadsheetId,
    config.sheetTabName,
    'B',
    { usedRowColor: config.usedRowColor }
  );

  if (!columnData || columnData.length === 0) {
    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets');
  }

  console.log(`üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${columnData.length} ‡πÅ‡∏ñ‡∏ß`);

  const unusedRows = columnData.filter((row) => {
    return row.text && row.text.trim() !== '' && !row.isUsed;
  });

  console.log(`‚úÖ ‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ: ${unusedRows.length} ‡πÅ‡∏ñ‡∏ß`);

  if (unusedRows.length === 0) {
    return { selectedRow: null, selectedRowIndex: null };
  }

  const randomIndex = Math.floor(Math.random() * unusedRows.length);
  const selectedItem = unusedRows[randomIndex];

  console.log(`üé≤ ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß: ${selectedItem.rowIndex} ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${unusedRows.length} ‡πÅ‡∏ñ‡∏ß`);
  console.log(`üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${selectedItem.text.substring(0, 100)}${selectedItem.text.length > 100 ? '...' : ''}`);

  return {
    selectedRow: selectedItem.text,
    selectedRowIndex: selectedItem.rowIndex
  };
}

async function markRowAsUsed(rowIndex) {
  console.log(`üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÅ‡∏ñ‡∏ß ${rowIndex} ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ (${config.usedRowColor})...`);

  await sheetsService.markRowAsUsed(
    config.spreadsheetId,
    config.sheetTabName,
    rowIndex,
    config.usedRowColor
  );

  console.log(`‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ñ‡∏ß ${rowIndex} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß`);
}

async function postToPageA(message, options = {}) {
  ensureConfig(['pageA_ID', 'pageA_TOKEN']);

  console.log(`üìò ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏õ‡πÄ‡∏û‡∏à A (ID: ${config.pageA_ID})...`);
  console.log(`üìÑ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${message.substring(0, 50)}${message.length > 50 ? '...' : ''}`);

  const payload = {
    message,
    access_token: config.pageA_TOKEN,
    published: options.published ?? true
  };

  const backgroundId = options.backgroundId ?? config.backgroundId;
  if (backgroundId) {
    payload.text_format_preset_id = backgroundId;
  }

  try {
    const fbClient = createFacebookClient(config.pageA_TOKEN);
    const response = await fbClient.api(
      `/${config.pageA_ID}/feed`,
      'post',
      payload
    );

    console.log(`‚úÖ Facebook API Response: ${JSON.stringify(response)}`);
    return response.id;
  } catch (error) {
    const fbError = error.fbError;
    const errorMsg = fbError?.message || error.message;
    console.error('‚ùå Facebook Post Error - ‡πÄ‡∏û‡∏à A:', fbError || errorMsg);
    throw new Error(`Failed to post to Page A: ${errorMsg}`);
  }
}

async function shareToPageB(postId) {
  ensureConfig(['pageB_ID', 'pageB_TOKEN']);

  const postLink = `https://www.facebook.com/${postId.replace('_', '/posts/')}`;
  console.log(`üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏õ‡πÄ‡∏û‡∏à B (ID: ${config.pageB_ID})...`);
  console.log(`üîó Post Link: ${postLink}`);

  try {
    const fbClient = createFacebookClient(config.pageB_TOKEN);
    const response = await fbClient.api(
      `/${config.pageB_ID}/feed`,
      'post',
      {
        link: postLink,
        access_token: config.pageB_TOKEN,
        published: true
      }
    );

    console.log(`‚úÖ Facebook Share API Response: ${JSON.stringify(response)}`);
    return response.id;
  } catch (error) {
    const fbError = error.fbError;
    const errorMsg = fbError?.message || error.message;
    console.error('‚ùå Facebook Share Error - ‡πÄ‡∏û‡∏à B:', fbError || errorMsg);

    if (fbError?.code === 200 || fbError?.code === 10) {
      console.error('üö´ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Access Token ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏à');
    } else if (fbError?.code === 100) {
      console.error('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• request ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    throw new Error(`Failed to share to Page B: ${errorMsg}`);
  }
}

async function postFromSheetAndShare() {
  ensureConfig([
    'pageA_ID',
    'pageA_TOKEN',
    'pageB_ID',
    'pageB_TOKEN',
    'spreadsheetId',
    'sheetTabName',
    'usedRowColor'
  ]);

  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏ä‡∏£‡πå...');

  const { selectedRow, selectedRowIndex } = await findUnusedRow();

  if (!selectedRow) {
    throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå');
  }

  const postId = await postToPageA(selectedRow);
  const shareId = await shareToPageB(postId);
  await markRowAsUsed(selectedRowIndex);

  const result = {
    success: true,
    postId,
    shareId,
    message: selectedRow,
    rowIndex: selectedRowIndex,
    postUrl: `https://www.facebook.com/${postId.replace('_', '/posts/')}`,
    shareUrl: `https://www.facebook.com/${shareId.replace('_', '/posts/')}`
  };

  console.log('üéâ ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!');
  console.log(JSON.stringify(result, null, 2));

  return result;
}

async function postDirectMessage(message, options = {}) {
  ensureConfig(['pageA_ID', 'pageA_TOKEN']);

  if (!message || !message.trim()) {
    throw new Error('Message is required when using direct post mode');
  }

  const postId = await postToPageA(message.trim(), options);

  let shareId = null;
  if (options.share) {
    shareId = await shareToPageB(postId);
  }

  const result = {
    success: true,
    postId,
    postUrl: `https://www.facebook.com/${postId.replace('_', '/posts/')}`,
    shareId,
    message: message.trim()
  };

  console.log(JSON.stringify(result, null, 2));
  return result;
}

module.exports = {
  postFromSheetAndShare,
  postDirectMessage,
  shareToPageB
};
